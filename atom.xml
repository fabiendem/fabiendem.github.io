<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wanted: A cool title]]></title>
  <link href="http://fabiendem.github.io/atom.xml" rel="self"/>
  <link href="http://fabiendem.github.io/"/>
  <updated>2014-04-09T10:56:22+01:00</updated>
  <id>http://fabiendem.github.io/</id>
  <author>
    <name><![CDATA[Fabien Demangeat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Commit template for better commit messages]]></title>
    <link href="http://fabiendem.github.io/blog/2014/04/08/commit-template-for-better-commit-messages/"/>
    <updated>2014-04-08T17:34:29+01:00</updated>
    <id>http://fabiendem.github.io/blog/2014/04/08/commit-template-for-better-commit-messages</id>
    <content type="html"><![CDATA[<p>Writing good commit messages should be an everyday commitment, but it can be sometimes difficult to stay self-disciplined, expecially on your personal project or during rush hours. This behaviour is well represented by xkcd:</p>

<p><img src="http://imgs.xkcd.com/comics/git_commit.png" title="Git Commit by xkcd" alt="Git commit by xkcd: http://xkcd.com/1296/" /></p>

<p><em>Source: <a href="http://xkcd.com/1296/">http://xkcd.com/1296/</a></em></p>

<p>A good solution is to create a default commit message, which will be used every time a commit is supposed to be done. Thanks to this message template you get used to the format and keep a good habit, and the configuration is pretty easy to do.</p>

<!-- more -->


<p>The configuration steps are well described on the <a href="http://git-scm.com/book/en/Customizing-Git-Git-Configuration">git-scm website, chapter 7.1 Customizing Git &ndash; Git Configuration, section <em>commit.template</em></a></p>

<h2>Create a template</h2>

<p>Create a file at <code>$HOME/.gitmessage.txt</code> if you want it global, or in your project&rsquo;s folder if you want it specific to your project.<br/>
In this file, specify the template you would like to see everytime you commit.</p>

<p>Example (Not saying it&rsquo;s the best one):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[theme] subjectline (keep it short)
</span><span class='line'>
</span><span class='line'>WhatHappened</span></code></pre></td></tr></table></div></figure>


<p>Some discussion about the message template and what a commit message should be can be found on the <a href="https://github.com/erlang/otp/wiki/Writing-good-commit-messages">Erlang/Otp wiki</a> or on the <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">tbaggery blog</a></p>

<h2>Configure Git</h2>

<p>Then configure Git to use you brand new template, using the commit.template parameter.</p>

<p>If it&rsquo;s for all your project, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global commit.template <span class="nv">$HOME</span>/.gitmessage.txt
</span></code></pre></td></tr></table></div></figure>


<p>If it specific to your Git based project directoy, assuming you have saved the template in this directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>project_directory/
</span><span class='line'>git config --local commit.template .gitmessage.txt
</span></code></pre></td></tr></table></div></figure>


<h2>Commit</h2>

<p>And then commit as usual but <strong>without</strong> using the <code>-m</code> flag, so your default <code>$EDITOR</code> will show up with the text from the template prepopulated.</p>

<p>If you keep replacing the values and filling the blanks of the template, you will quickly get use to the format. It&rsquo;s then a matter of time before you disable the template and keep going with your new good habit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Android APK and staged rollout]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/31/multiple-android-apk-and-staged-rollout/"/>
    <updated>2014-03-31T16:06:40+01:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/31/multiple-android-apk-and-staged-rollout</id>
    <content type="html"><![CDATA[<p>In some conditions, you may need to publish different APKs for your application that are each targeted to different device configuration. Even if it&rsquo;s not really recommended, it is possible thanks to the <a href="http://developer.android.com/google/play/publishing/multiple-apks.html">Multiple APK support</a>.</p>

<p>Another cool feature from the Android distribution system is the staged-rollout, recently introduced by Google. The feature is <a href="https://support.google.com/googleplay/android-developer/answer/3131213">well described on the distribution support website</a> and <a href="http://developer.android.com/distribute/googleplay/about/distribution.html">also on the Android developer website</a>.<br/>
Basically it allows to distribute your app to a percentage of users in order to gather possible critical bug reports and reviews before all your user based gets the update pushed on their device, you can slowly increase the percentage of users getting the update when you are more confident with your modifications.</p>

<p>Despite of the detailed documentation, a question raised while working on a Android app didn&rsquo;t find its answer from the documentation:</p>

<blockquote><p>If you have 2 APKs, let&rsquo;s say one for 2 APIs level ranges (eg: API >=17 and &lt; 17). You want to publish an update for the users having a device running on Android API >= 17, and you select a stage rollout distribution for 20% of your user.<br/>
On which users group will the percentage be based? All the users having your app (API &lt; 17 and API >= 17) or only the users who have a compatible device (API >= 17)?</p></blockquote>

<!-- more -->


<p>We haven&rsquo;t found the answer in the documentation, but the Google Play developer support team came up with this answer which may help you:</p>

<blockquote><p>If you select 20% for your staged rollout of the APK that is set for API 17+ then you should expect the 20% to be taken from users that have devices compatible with that API version, instead of all users eligible for the application.<br/>
<cite>Google Play developer support</cite></p></blockquote>

<p>Now the answer is clear!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Gradle build examples]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/31/android-gradle-build-examples/"/>
    <updated>2014-03-31T15:18:10+01:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/31/android-gradle-build-examples</id>
    <content type="html"><![CDATA[<p>Diving into the new (new? well depends on you) Android Gradle build system may be a scary experience when you are used to the good old Eclipse ADT environment.<br/>
But really, the Android Gradle system is worth it, it has SO MUCH to give you!</p>

<p>The problem is to find some examples to get started, as Android Gradle is still quite new.</p>

<!-- more -->


<h3>Samples exist</h3>

<p>The documentation is not perfect yet and you may think that there is a lack of examples/samples on Ze Internet.<br/>
So if you haven&rsquo;t found what you want on the the <a href="http://tools.android.com/tech-docs/new-build-system/user-guide">Android Gradle Plugin User guide</a>, maybe it worth having a look at the <strong>bottom</strong> of the <a href="http://tools.android.com/tech-docs/new-build-system">New build system page</a>, where some samples are available in Zip files.</p>

<p>Another good resource is the Git repo of the build system, in the <strong>tests folder</strong> you will find plenty of <a href="https://android.googlesource.com/platform/tools/base/+/master/build-system/tests/">Android gradle build examples</a>, which are actually gathered in the archives available at the bottom of the <a href="http://tools.android.com/tech-docs/new-build-system">New build system page</a>, previously cited.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pencil: a Free and Open-source Android prototyping tool]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/31/pencil-a-free-and-opensource-android-prototyping-tool/"/>
    <updated>2014-03-31T14:14:39+01:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/31/pencil-a-free-and-opensource-android-prototyping-tool</id>
    <content type="html"><![CDATA[<p>When it comes to User interface prototyping, you will find loads of solutions, some of them web based with limited features, others non-free, etc.
None of which I was happy when short on money, or say for an occasional project.</p>

<p>But I have finally found a quite good solution.</p>

<!-- more -->


<p>Here is <a href="http://pencil.evolus.vn/">Pencil</a>, free, open-source with all the features I was expecting:</p>

<ul>
<li>Templates, so you don&rsquo;t repeat yourself</li>
<li>Built-in Native UI elements</li>
<li>Image import</li>
<li>Export to PNG and PDF</li>
</ul>


<p>If you are an iOS guy, the common iOS elements are also directly embedded in the app.</p>

<p>Note that if you run on Mac OS Mavericks, you will need the version <a href="https://evoluspencil.googlecode.com/files/Pencil-2.0.6-mac.tar.bz2">2.0.6</a> (in beta at the time I am writing this).</p>

<p>That&rsquo;s it, give it try and enjoy.</p>

<p><a href="http://pencil.evolus.vn/"><img src="http://pencil.evolus.vn/styling/images/logo-shadow.png" title="Logo Pencil" alt="Pencil logo" /> Pencil project</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cool online Markdown editor: StackEdit]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/18/cool-online-markdown-editor-stackedit/"/>
    <updated>2014-03-18T12:02:35+00:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/18/cool-online-markdown-editor-stackedit</id>
    <content type="html"><![CDATA[<p>Jekyll and so Octopress allow to write your content in Markdown, cool stuff!
But for this you need a <strong>good Markdown editor</strong>.</p>

<!-- more -->


<p>And here comes <a href="https://stackedit.io/">StackEdit</a>:</p>

<ul>
<li>Open-source (<a href="https://github.com/benweet/stackedit">hosted on GitHub</a>)</li>
<li>Free</li>
<li>Online</li>
<li>Live preview</li>
<li>Backup on Dropbox, Drive</li>
<li>Publication features</li>
</ul>


<p>Have a look!</p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the Git working branch in Gradle]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/17/get-the-git-working-branch-in-gradle/"/>
    <updated>2014-03-17T15:49:45+00:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/17/get-the-git-working-branch-in-gradle</id>
    <content type="html"><![CDATA[<p>Getting the working branch name via Gradle can be useful if you want to add this information somewhere in your build, for example in the versionName of your debug Android build by suffixing it.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">debug</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">versionNameSuffix</span> <span class="s2">&quot;-branch_&quot;</span> <span class="o">+</span> <span class="n">getWorkingBranch</span><span class="o">()</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The getWorkingBranch is a function defined as below in your build.gradle file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the name of the working branch of the project</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return Name of the working branch</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">getWorkingBranch</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Triple double-quotes for the breaklines</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">workingBranch</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;git --git-dir=${rootDir}/../.git</span>
</span><span class='line'><span class="s2">                               --work-tree=${rootDir}/..</span>
</span><span class='line'><span class="s2">                               rev-parse --abbrev-ref HEAD&quot;&quot;&quot;</span><span class="o">.</span><span class="na">execute</span><span class="o">().</span><span class="na">text</span><span class="o">.</span><span class="na">trim</span><span class="o">()</span>
</span><span class='line'>    <span class="n">print</span> <span class="s2">&quot;Working branch: &quot;</span> <span class="o">+</span> <span class="n">workingBranch</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">workingBranch</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Source:</strong> Figured it out from the <a href="https://plus.google.com/+JakeWharton/posts/6f5TcVPRZij">Jake Wahrton Google+ post</a> and the comments.</p>

<p>It actually executes the following git command to get the current branch: <code>git rev-parse --abbrev-ref HEAD</code></p>

<p><code>--git-dir=${rootDir}/.git --work-tree=${rootDir}</code> is used to tell git on which local repo the command should be executed, as the gradle function (and so the git command) won&rsquo;t be executed from the root of you Android project. You just need to show its way to git&hellip;</p>

<p>If your module executing the getWorkingBranch task is 2 levels down within your project, simply update the <code>--git-dir=${rootDir}/.git --work-tree=${rootDir}</code> parameters to <br/>
<code>--git-dir=${rootDir}/../../.git --work-tree=${rootDir}/../..</code> (see the <code>../..</code>)</p>
]]></content>
  </entry>
  
</feed>
