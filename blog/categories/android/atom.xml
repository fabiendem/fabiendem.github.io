<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Wanted: A cool title]]></title>
  <link href="http://fabiendem.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://fabiendem.github.io/"/>
  <updated>2014-03-31T14:37:14+01:00</updated>
  <id>http://fabiendem.github.io/</id>
  <author>
    <name><![CDATA[Fabien Demangeat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pencil: a Free and Open-source Android prototyping tool]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/31/pencil-a-free-and-opensource-android-prototyping-tool/"/>
    <updated>2014-03-31T14:14:39+01:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/31/pencil-a-free-and-opensource-android-prototyping-tool</id>
    <content type="html"><![CDATA[<p>When it comes to User interface prototyping, you will find loads of solutions, some of them web based with limited features, others non-free, etc.
None of which I was happy when short on money, or say for an occasional project.</p>

<p>But I have finally found a quite good solution, <a href="http://pencil.evolus.vn/">Pencil</a> free, open-source with all the features I was expecting:</p>

<ul>
<li>Templates, so you don&rsquo;t repeat yourself</li>
<li>Built-in Native UI elements</li>
<li>Image import</li>
<li>Export to PNG and PDF</li>
</ul>


<p>If you are an iOS guy, the common iOS elements are also directly embedded in the app.</p>

<p>Note that if you run on Mac OS Mavericks, you will need the version <a href="https://evoluspencil.googlecode.com/files/Pencil-2.0.6-mac.tar.bz2">2.0.6</a> (in beta at the time I am writing this).</p>

<p>That&rsquo;s it, give it try and enjoy.</p>

<p><a href="http://pencil.evolus.vn/"><img src="http://pencil.evolus.vn/styling/images/logo-shadow.png" title="Logo Pencil" alt="Pencil logo" /> Pencil project</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the Git working branch in Gradle]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/17/get-the-git-working-branch-in-gradle/"/>
    <updated>2014-03-17T15:49:45+00:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/17/get-the-git-working-branch-in-gradle</id>
    <content type="html"><![CDATA[<p>Getting the working branch name via Gradle can be useful if you want to add this information somewhere in your build, for example in the versionName of your debug Android build by suffixing it:
``` groovy
buildTypes {</p>

<pre><code>debug {
    ...
    versionNameSuffix "-branch_" + getWorkingBranch()
    ...
}
...
</code></pre>

<p>}
<code>
The getWorkingBranch is a function defined as below in your build.gradle file:
</code> groovy
/<em>*
 * Get the name of the working branch of the project
 *
 * @return Name of the working branch
 </em>/
def getWorkingBranch() {</p>

<pre><code>// Triple double-quotes for the breaklines
def workingBranch = """git --git-dir=${rootDir}/../.git
                           --work-tree=${rootDir}/..
                           rev-parse --abbrev-ref HEAD""".execute().text.trim()
print "Working branch: " + workingBranch
return workingBranch
</code></pre>

<p>}
```</p>

<p><strong>Source:</strong> Figured it out from the <a href="https://plus.google.com/+JakeWharton/posts/6f5TcVPRZij">Jake Wahrton Google+ post</a> and the comments.</p>

<p>It actually executes the following git command to get the current branch: <code>git rev-parse --abbrev-ref HEAD</code></p>

<p><code>--git-dir=${rootDir}/.git --work-tree=${rootDir}</code> is used to tell git on which local repo the command should be executed, as the gradle function (and so the git command) won&rsquo;t be executed from the root of you Android project. You just need to show its way to git&hellip;</p>

<p>If your module executing the getWorkingBranch task is 2 levels down within your project, simply update the <code>--git-dir=${rootDir}/.git --work-tree=${rootDir}</code> parameters to <br/>
<code>--git-dir=${rootDir}/../../.git --work-tree=${rootDir}/../..</code> (see the <code>../..</code>)</p>
]]></content>
  </entry>
  
</feed>
