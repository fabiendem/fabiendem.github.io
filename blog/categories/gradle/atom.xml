<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | Wanted: A cool title]]></title>
  <link href="http://fabiendem.github.io/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://fabiendem.github.io/"/>
  <updated>2014-03-31T18:22:37+01:00</updated>
  <id>http://fabiendem.github.io/</id>
  <author>
    <name><![CDATA[Fabien Demangeat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Gradle build examples]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/31/android-gradle-build-examples/"/>
    <updated>2014-03-31T15:18:10+01:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/31/android-gradle-build-examples</id>
    <content type="html"><![CDATA[<p>Diving into the new (new? well depends on you) Android Gradle build system may be a scary experience when you are used to the good old Eclipse ADT environment.<br/>
But really, the Android Gradle system is worth it, it has SO MUCH to give you!</p>

<h3>Samples exist</h3>

<p>The documentation is not perfect yet and you may think that there is a lack of examples/samples on Ze Internet.<br/>
So if you haven&rsquo;t found what you want on the the <a href="http://tools.android.com/tech-docs/new-build-system/user-guide">Android Gradle Plugin User guide</a>, maybe it worth having a look at the <strong>bottom</strong> of the <a href="http://tools.android.com/tech-docs/new-build-system">New build system page</a>, where some samples are available in Zip files.</p>

<p>Another good resource is the Git repo of the build system, in the <strong>tests folder</strong> you will find plenty of <a href="https://android.googlesource.com/platform/tools/base/+/master/build-system/tests/">Android gradle build examples</a>, which are actually gathered in the archives available at the bottom of the <a href="http://tools.android.com/tech-docs/new-build-system">New build system page</a>, previously cited.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the Git working branch in Gradle]]></title>
    <link href="http://fabiendem.github.io/blog/2014/03/17/get-the-git-working-branch-in-gradle/"/>
    <updated>2014-03-17T15:49:45+00:00</updated>
    <id>http://fabiendem.github.io/blog/2014/03/17/get-the-git-working-branch-in-gradle</id>
    <content type="html"><![CDATA[<p>Getting the working branch name via Gradle can be useful if you want to add this information somewhere in your build, for example in the versionName of your debug Android build by suffixing it:
``` groovy
buildTypes {</p>

<pre><code>debug {
    ...
    versionNameSuffix "-branch_" + getWorkingBranch()
    ...
}
...
</code></pre>

<p>}
<code>
The getWorkingBranch is a function defined as below in your build.gradle file:
</code> groovy
/<em>*
 * Get the name of the working branch of the project
 *
 * @return Name of the working branch
 </em>/
def getWorkingBranch() {</p>

<pre><code>// Triple double-quotes for the breaklines
def workingBranch = """git --git-dir=${rootDir}/../.git
                           --work-tree=${rootDir}/..
                           rev-parse --abbrev-ref HEAD""".execute().text.trim()
print "Working branch: " + workingBranch
return workingBranch
</code></pre>

<p>}
```</p>

<p><strong>Source:</strong> Figured it out from the <a href="https://plus.google.com/+JakeWharton/posts/6f5TcVPRZij">Jake Wahrton Google+ post</a> and the comments.</p>

<p>It actually executes the following git command to get the current branch: <code>git rev-parse --abbrev-ref HEAD</code></p>

<p><code>--git-dir=${rootDir}/.git --work-tree=${rootDir}</code> is used to tell git on which local repo the command should be executed, as the gradle function (and so the git command) won&rsquo;t be executed from the root of you Android project. You just need to show its way to git&hellip;</p>

<p>If your module executing the getWorkingBranch task is 2 levels down within your project, simply update the <code>--git-dir=${rootDir}/.git --work-tree=${rootDir}</code> parameters to <br/>
<code>--git-dir=${rootDir}/../../.git --work-tree=${rootDir}/../..</code> (see the <code>../..</code>)</p>
]]></content>
  </entry>
  
</feed>
